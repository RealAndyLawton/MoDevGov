buildscript {
    repositories {
        mavenCentral()
        // Add this repository:
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
        // And this dependency:
        classpath 'com.novoda.gradle:robolectric-plugin:0.0.1-SNAPSHOT'
    }
}

allprojects {
    repositories {
        mavenCentral()
        // And finally this repository again.
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
}

apply plugin: 'android'
apply plugin: 'robolectric'


dependencies {

    compile group: 'com.squareup.dagger', name: 'dagger', version: '1.2.0'
    compile group: 'com.squareup.dagger', name: 'dagger-compiler', version: '1.2.0'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'

    instrumentTestCompile 'org.robolectric:robolectric:2.+'
    instrumentTestCompile 'junit:junit:4.+'
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.0'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            storeFile file(".keystore/modevgov-release.key")
            storePassword "foo"
            keyAlias "bar"
            keyPassword "baz"
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            //signingConfig signingConfigs.release
        }
        beta {
            runProguard false
            packageNameSuffix '.beta'
            versionNameSuffix '-BETA'
            signingConfig signingConfigs.debug
        }
    }

}

task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}